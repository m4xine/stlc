module Main where

import            Control.Monad.Except            (ExceptT, runExceptT, MonadError (..))
import            Control.Monad.State.Lazy        (State, evalState, modify, MonadState (..))
import            Control.Comonad.Cofree          (Cofree ((:<)))
import            Data.Char                       (digitToInt)
import            Data.Maybe                      (fromMaybe)
import            Data.Monoid.Unicode             ((‚äï), (‚àÖ))
import            Data.List.Unicode               ((‚Äº), (‚ß∫), ùúÄ)
import            Data.Eq.Unicode                 ((‚â°))
import            Control.Category.Unicode        ((‚àò))
import qualified  Data.Set                  as S
import qualified  Data.Map                  as M
import            Text.Show.Deriving              (deriveShow1)
import            Utility                         ((<<$>>))

data Type
  = TFun Type Type
  | TVar String
  deriving (Show, Eq)

prettyType ‚à∑ Type -> String
prettyType (TFun c@(TFun _ _) d) = 
  "(" ‚ß∫ prettyType c ‚ß∫ ")" ‚ß∫ " -> " ‚ß∫ prettyType d 
prettyType (TFun c d) = prettyType c ‚ß∫ " -> " ‚ß∫ prettyType d 
prettyType (TVar v)   = v 

data ExprF a
  = EAbs String a
  | EApp a a
  | EVar String
  deriving Functor

deriveShow1 ''ExprF

type Expr = Cofree ExprF

prettyExpr ‚à∑ Expr a ‚Üí String  
prettyExpr (_ :< e) = case e of
  EAbs x                  e ‚Üí "\\" ‚ß∫ x ‚ß∫ "." ‚ß∫ prettyExpr e
  EApp f@(_ :< EAbs _ _)  x ‚Üí "(" ‚ß∫ prettyExpr f ‚ß∫ ") " ‚ß∫ prettyExpr x 
  EApp f                  x ‚Üí prettyExpr f ‚ß∫ " " ‚ß∫ prettyExpr x
  EVar x                    ‚Üí x

newtype Subst = MkSubst { unSubst ‚à∑ M.Map String Type }

(??) ‚à∑ Subst ‚Üí String ‚Üí Maybe Type
(??) = flip M.lookup ‚àò unSubst

instance Semigroup Subst where
  a@(MkSubst a') <> (MkSubst b) = 
    MkSubst $ M.union (M.map (apply a) b) a'

instance Monoid Subst where
  mempty = MkSubst mempty 

-- TODO: generalize w this
class Substitutable Œ± where
  apply ‚à∑ Subst ‚Üí Œ± ‚Üí Œ±
  ftv   ‚à∑ Œ± ‚Üí S.Set String

instance Substitutable Type where
  apply s = \case
    TFun c d  ‚Üí TFun (apply s c) (apply s d)
    TVar a    ‚Üí fromMaybe (TVar a) (s ?? a)
  ftv = \case
    TVar v    ‚Üí S.singleton v
    TFun c d  ‚Üí S.union (ftv c) (ftv d)

-- Representation of a type scheme ~ ‚àÄŒ±.œÑ
data Scheme = Forall [String] Type

instance Substitutable Scheme where
  apply (MkSubst s) (Forall as t) =
    Forall as $ apply (MkSubst $ foldr M.delete s as) t
  ftv (Forall as t) = S.difference (ftv t) (S.fromList as)

type TC = ExceptT String (State Int)

runTC ‚à∑ TC a ‚Üí Either String a
runTC tc = evalState (runExceptT tc) 0

newTVar ‚à∑ TC Type
newTVar =
    TVar ‚àò (names ‚Äº) <$> get <* modify succ
  where
    names = ["t" ‚ß∫ show i | i <- [0..]]

bind ‚à∑ String ‚Üí Type ‚Üí TC Subst
bind v t
  | t ‚â° TVar v          = pure (‚àÖ)
  | S.member v (ftv t)  = throwError "Infinite type"
  | otherwise           = pure ‚àò MkSubst $ M.singleton v t

unify ‚à∑ Type ‚Üí Type ‚Üí TC Subst
unify (TFun c‚ÇÄ d‚ÇÄ) (TFun c‚ÇÅ d‚ÇÅ) = do
  s‚ÇÄ  ‚Üê unify c‚ÇÄ c‚ÇÅ
  s‚ÇÅ  ‚Üê unify (apply s‚ÇÄ d‚ÇÄ) (apply s‚ÇÄ d‚ÇÅ)
  pure $ s‚ÇÅ ‚äï s‚ÇÄ
unify (TVar v) t = bind v t
unify t (TVar v) = bind v t
-- unify t‚ÇÄ t‚ÇÅ = throwError $ mconcat [show t‚ÇÄ, " doesn't unify with ", show t‚ÇÅ] 

type Œì = M.Map String Scheme

instance Substitutable Œì where
  apply = M.map ‚àò apply
  ftv = foldMap ftv ‚àò M.elems

generalize ‚à∑ Œì ‚Üí Type ‚Üí Scheme
generalize Œ≥ t =
  Forall (S.toList $ S.difference (ftv t) (ftv Œ≥)) t

instantiate ‚à∑ Scheme ‚Üí TC Type
instantiate (Forall as t) = do
  tvs ‚Üê traverse (const newTVar) as
  pure $ apply (MkSubst ‚àò M.fromList $ zip as tvs) t

infer' ‚à∑ Œì ‚Üí Expr a ‚Üí TC (Expr (Subst, Type))
infer' Œ≥ (_ :< e) = case e of
  EVar v ‚Üí case M.lookup v Œ≥ of
    Nothing ‚Üí throwError $ "Unknown variable: " ‚ß∫ v
    Just s  ‚Üí (:< EVar v) ‚àò ((‚àÖ),) <$> instantiate s
  EApp f e' ‚Üí do
    t‚ÇÄ                  ‚Üê newTVar
    f'@((s‚ÇÅ, t‚ÇÅ) :< _)  ‚Üê infer' Œ≥ f
    e''@((s‚ÇÇ, t‚ÇÇ) :< _) ‚Üê infer' (apply s‚ÇÅ Œ≥) e'
    s‚ÇÉ                  ‚Üê unify (apply s‚ÇÇ t‚ÇÅ) (TFun t‚ÇÇ t‚ÇÄ)
    pure $ (s‚ÇÉ ‚äï s‚ÇÇ ‚äï s‚ÇÅ, apply s‚ÇÉ t‚ÇÄ) :< EApp f' e''
  EAbs x e' ‚Üí do
    t‚ÇÄ                  ‚Üê newTVar
    e''@((s‚ÇÅ, t‚ÇÅ) :< _) ‚Üê infer' (M.insert x (Forall ùúÄ t‚ÇÄ) Œ≥) e'
    pure $ (s‚ÇÅ, TFun (apply s‚ÇÅ t‚ÇÄ) t‚ÇÅ) :< EAbs x e''

infer ‚à∑ Expr a ‚Üí TC (Expr Type)
infer e = uncurry apply <<$>> infer' (‚àÖ) e

main ‚à∑ IO ()
main = do
  let e = runTC ‚àò infer $ () :< EAbs "x" (() :< EAbs "y" (() :< EApp (() :< EVar "x") (() :< EVar "y")))
  case e of
    Left e' -> print e' 
    Right e@(t :< _) -> putStrLn $ prettyExpr e ‚ß∫ " : " ‚ß∫ prettyType t 